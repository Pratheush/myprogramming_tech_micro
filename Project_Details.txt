
myprogramming_tech_micro:::::::::::::::::
  


PRODUCT-SERVICE:::::::::::::::::::::::::

sudo docker container run -d --name my_mongodb -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password -p 27000:27017 -v /home/pratheush/jlab/my_idea_projects/myprogramming_tech_micro/ProductSDB/:/data/db mongo:latest


sudo docker container run -d --name my_mongodb -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password -p 27000:27017 -v /home/pratheush/jlab/my_idea_projects/myprogramming_tech_micro/productsdb/:/data/db mongo:latest

curl -X POST --header "Content-Type: application/json" -d '{"product":{"id":"101","name" : "Samsung","description" : "Mobile","price" : 17999.0}}' http://localhost:8082/api/product


 "name" : "Samsung",
  "description" : "Mobile"
    "price" : 45.0,
    



mongosh "mongodb://localhost:28015"

mongosh "mongodb://mongodb0.example.com:28015" --username alice --authenticationDatabase admin

mongosh "mongodb://localhost:27017" --username admin --password password --authenticationDatabase admin







exit
root@ff1c1d8e211c:/# mongosh "mongodb://localhost:27000" --username admin --password password --authenticationDatabase admin
Current Mongosh Log ID:	63815a20a986688af70bc455
Connecting to:		mongodb://<credentials>@localhost:27000/?directConnection=true&serverSelectionTimeoutMS=2000&authSource=admin&appName=mongosh+1.6.0
MongoNetworkError: connect ECONNREFUSED 127.0.0.1:27000
root@ff1c1d8e211c:/# mongosh "mongodb://localhost:27017" --username admin --password password --authenticationDatabase admin
Current Mongosh Log ID:	63815a36af79e39f0b249524
Connecting to:		mongodb://<credentials>@localhost:27017/?directConnection=true&serverSelectionTimeoutMS=2000&authSource=admin&appName=mongosh+1.6.0
Using MongoDB:		6.0.3
Using Mongosh:		1.6.0

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2022-11-25T17:32:04.622+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
   2022-11-25T17:32:08.457+00:00: vm.max_map_count is too low
------

------
   Enable MongoDB's free cloud-based monitoring service, which will then receive and display
   metrics about your deployment (disk utilization, CPU, operation statistics, etc).
   
   The monitoring data will be available on a MongoDB website with a unique URL accessible to you
   and anyone you share the URL with. MongoDB may use this information to make product
   improvements and to suggest MongoDB products and deployment options to you.
   
   To enable free monitoring, run the following command: db.enableFreeMonitoring()
   To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
------

test> show dbs
admin      100.00 KiB
config      72.00 KiB
local       72.00 KiB
productss   40.00 KiB
test> use productss
switched to db productss
productss> show collections
product
productss> db.product.find().pretty();
[ { _id: ObjectId("6380fc3d64942711c64e1b3a") } ]
productss> db.product.find().pretty
[Function: pretty] {
  returnType: 'this',
  serverVersions: [ '0.0.0', '999.999.999' ],
  apiVersions: [ 0, Infinity ],
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnsPromise: false,
  deprecated: false,
  platforms: [ 'Compass', 'Browser', 'CLI' ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
productss> 





{"description":"loggi","severity":1,"assignee":"Basant Hota","storyPoint":5}


curl -X POST --header "Content-Type: application/json" -d '{"description":"loggi","severity":1,"assignee":"Basant Hota","storyPoint":5}' http://localhost:8087/tasks



mongosh "mongodb://localhost:27017" --username admin --password password --authenticationDatabase admin







-----------------------------------------------------------------------------------------------------------------------------

ORDER-SERVICE :::::::::::::::::::::::::::::::::

Hibernate: create table t_order_line_items (id bigint generated by default as identity, price numeric(19,2), quantity integer, sku_code varchar(255), primary key (id))
Hibernate: create table t_orders (id bigint generated by default as identity, order_number varchar(255), primary key (id))
Hibernate: create table t_orders_order_line_items_list (order_id bigint not null, order_line_items_list_id bigint not null)
Hibernate: alter table t_orders_order_line_items_list drop constraint if exists UK_nqpoocsk2utvq7va8bgth1mj9
Hibernate: alter table t_orders_order_line_items_list add constraint UK_nqpoocsk2utvq7va8bgth1mj9 unique (order_line_items_list_id)
Hibernate: alter table t_orders_order_line_items_list add constraint FK1qq155yd0omg8y9in6526bhaj foreign key (order_line_items_list_id) references t_order_line_items
Hibernate: alter table t_orders_order_line_items_list add constraint FK3wdgw7hxmodjqfulfaymc8aof foreign key (order_id) references t_orders





{{"id":102,"sku_code":"023MAR22","price":21000,"quantity":02}}
{"orderLineItemsDtoList":[{"skuCode":"asus rog laptop","price":98750,"quantity":1}]}

curl -X POST --header "Content-Type: application/json" -d '{"orderLineItemsDtoList":[{"skuCode":"asus rog laptop","price":98750,"quantity":1}]}' http://localhost:8087/api/order/

curl -X POST --header "Content-Type: application/json" -d '{"orderLineItemsDtoList":[{"skuCode":"iphone_13","price":113000,"quantity":1}]}' http://localhost:8087/api/order/

iphone_13

private Long id;
    private String skuCode;
    private BigDecimal price;
    private Integer quantity;

 private List<OrderLineItemsDto> orderLineItemsDtoList;




Testcontainers for Java is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, 
Selenium web browsers, or anything else that can run in a Docker container.

Testcontainers make the following kinds of tests easier::
Data access layer integration tests: use a containerized instance of a MySQL, PostgreSQL or Oracle database to test your data access layer code for complete compatibility, but without requiring complex setup on developers' machines and safe in the knowledge that your tests will always start with a known DB state. Any other database type that can be containerized can also be used.
Application integration tests: for running your application in a short-lived test mode with dependencies, such as databases, message queues or web servers.
UI/Acceptance tests: use containerized web browsers, compatible with Selenium, for conducting automated UI tests. Each test can get a fresh instance of the browser, with no browser state, plugin variations or automated browser upgrades to worry about. And you get a video recording of each test session, or just each session where tests failed.









------------------------------------------------------------------------------------------------------------------------------------------------------------------------


INVENTORY-SERVICE :::::::::::::::::::::::::::::::::




curl -X POST --header "Content-Type: application/json" -d '{"product":{"id":"101","name" : "Samsung","description" : "Mobile","price" : 17999.0}}' http://localhost:8088/api/inventory/{sku-code}

curl  http://localhost:8088/api/inventory/iphone_13



THIS URL WILL NOT WORK BECAUSE I AM SUPPOSE TO POST Request-Parameter
curl -d '{"skuCode":"iphone_13"}'  http://localhost:8088/api/inventory/iphone_13



curl http://localhost:8088/api/inventory?skuCode=iphone_13




curl -X POST --header "Content-Type: application/json" -d '{"orderLineItemsDtoList":[{"skuCode":"iphone_13","price":113000,"quantity":1}]}'  http://localhost:8087/api/order/

curl -X POST --header "Content-Type: application/json" -d '{"orderLineItemsDtoList":[{"skuCode":"iphone_13","price":300000000,"quantity":3}]}'  http://localhost:8087/api/order/


















