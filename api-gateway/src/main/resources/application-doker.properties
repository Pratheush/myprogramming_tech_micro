spring.application.name=API-GATEWAY

#server.port=8080

spring.cloud.config.enabled=false
#spring.config.import=optional:configserver:http:'//localhost:8888
#spring.config.import=configserver:http:'//spring-cloud-config-server:8888

# if the Spring-Cloud-Config-Server is Down?
# after mentioning this code client will not run without getting configuration from Spring-Cloud-Config-Server. Default value is false
#spring.cloud.config.failFast=true
#spring.cloud.config.retry.max-attempts=15

#configure Eureka URL for its own-discovery to other running Eureka-Naming-Server
# configuring the naming-server url in the application.properties of microservice application. to register microservice app properly with the naming-server
#eureka.client.serviceUrl.defaultZone=http:'//localhost:8761/eureka
#eureka.client.serviceUrl.defaultZone=http:'//eureka:password@localhost:8761/eureka

logging.level.root=INFO
# RouteDefinitionRouteLocator is the class which is responsible to define the routes and identify the routes for incoming request
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=INFO
logging.level.org.springframework.cloud.gateway=TRACE

# when we hit http:'//localhost:8080/api/product/ then api-gateway will route the call to the PRODUCT-SERVICE
# and also to load-balance i.e. distributing the traffic between the different available instances so to loadbalance :: lb://PRODUCT-SERVICE
## Product Service Route
spring.cloud.gateway.routes[0].id=PRODUCT-SERVICE
spring.cloud.gateway.routes[0].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

# when we hit http:'//localhost:8080/api/product/ then api-gateway will route the call to the ORDER-SERVICE
# and also to load-balance i.e. distributing the traffic between the different available instances so to loadbalance using >> lb://ORDER-SERVICE
## Order Service Route
spring.cloud.gateway.routes[1].id=ORDER-SERVICE
spring.cloud.gateway.routes[1].uri=lb://ORDER-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order

## Discover Server Route
spring.cloud.gateway.routes[2].id=DISCOVERY-SERVICE
spring.cloud.gateway.routes[2].uri=http://discovery-server:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
# whenever api-gateway calls http:'//localhost:8080/eureka/web/ it will call http:'//localhost:8761/eureka/web/
# but we want that after calling http:'//localhost:8080/eureka/web/ through api-gateway it should call http:'//localhost:8761/ instead of http:'//localhost:8761/eureka/web/
spring.cloud.gateway.routes[2].filters[0]=SetPath=/

# another Discovery Service Route created below so that eureka web-endpoint will be accessible through gatewayApplication
## and when eureka web endpoint will load up , it will loadup with full css and javascript without this extra route setting web-endoint will load up but without css and javascript means no beautiful look
## Discover Server Static Resources Route
spring.cloud.gateway.routes[3].id=DISCOVERY-SERVICE-STATIC
spring.cloud.gateway.routes[3].uri=http://discovery-server:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

# at the start-up spring-boot will read ("authorization_endpoint,token_endpoint,jwks_uri,authorization_endpoint etc) from the below given issuer-uri
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http:'//localhost:8180/realms/myprogramming_tech_micro

### Distributed Tracing ###
# this sampler probability is 1.0 that means we want to send 100% of the request which we are receiving to our system to zipkin
# we want to start tracing 100% of the request which we are receiving to our system
spring.sleuth.sampler.probability=1.0
#spring.zipkin.base-url=http:'//localhost:9411/

server.port=8080
eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/myprogramming_tech_micro
spring.zipkin.base-url=http://zipkin:9411
